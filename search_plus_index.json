{"./":{"url":"./","title":"简介","keywords":"","body":"Gitbook个人博客 个人标签：勤劳的螺丝工，后端资深CV攻城狮，golang深度中毒者...联系邮箱：zhang.jiejun@outlook.com人生目标：每天进步一点点 学习寄语： 学而不思则罔，思而不学则殆。 这句话为孔子所提倡的一种读书及学习方法。指的是一味读书而不思考，就会因为不能深刻理解书本的意义而不能合理有效利用书本的知识，甚至会陷入迷茫。而如果一味空想而不去进行实实在在地学习和钻研，则终究是沙上建塔，一无所得。 学习离不开思考，思考也不能脱离学习，二者相辅相成，缺一不可，这是学习的最基本方法。 写作目的 自我学习总结 简化他人学习成果 记录遇到的问题与解决方式 分享我的知识、经历和观点 目录 golang slice底层原理 map底层原理 反射机制 context详解 单元测试 C/C++ Python 数据结构 常用算法 排序算法 Linux常用命令 Linux三剑客 MySql MySql安装与使用 Thrift Thrift简介 微服务架构 什么是微服务 VMware VMware备份传输模式 git的使用方法 "},"src/golang/":{"url":"src/golang/","title":"golang","keywords":"","body":"golang   Go是一个开源的编程语言，它能让构造简单、可靠且高效的软件变得容易。Go是从2007年末由Robert Griesemer, Rob Pike, Ken Thompson主持开发，后来还加入了Ian Lance Taylor, Russ Cox等人，并最终于2009年11月开源，在2012年早些时候发布了Go 1稳定版本。现在Go的开发已经是完全开放的，并且拥有一个活跃的社区。 语言特色： 简洁、快速、安全 并行、有趣、开源 内存管理、数组安全、编译迅速 目录 slice底层原理 map底层原理 反射机制 context详解 单元测试 "},"src/golang/slice.html":{"url":"src/golang/slice.html","title":"slice底层原理","keywords":"","body":"slice底层原理 slice是什么？   切片(slice)是 Golang 中一种比较特殊的数据结构，这种数据结构更便于使用和管理数据集合。切片是围绕动态数组的概念构建的，可以按需自动增长和缩小。切片(slice)是可以看做是一个长度可变的数组。  切片(slice)自身并不是动态数组或者数组指针。它内部实现的数据结构通过指针引用底层数组，设定相关属性将数据读写操作限定在指定的区域内。  切片(slice)是对数组一个连续片段的引用，所以切片是一个引用类型。 slice的实现原理   切片本身并不是动态数组或者数组指针。它内部实现的数据结构通过指针引用底层数组，设定相关属性将数据读写操作限定在指定的区域内。切片本身是一个只读对象，其工作机制类似数组指针的一种封装。   切片（slice）是对数组一个连续片段的引用，所以切片是一个引用类型（因此更类似于 C/C++ 中的数组类型，或者 Python 中的 list 类型）。这个片段可以是整个数组，或者是由起始和终止索引标识的一些项的子集。需要注意的是，终止索引标识的项不包括在切片内。切片提供了一个与指向数组的动态窗口。 slice数据结构 type slice struct { array unsafe.Pointer len int cap int } slice内存模型   切片的结构体由3部分构成，Pointer 是指向一个数组的指针，len 代表当前切片的长度，cap 是当前切片的容量。cap 总是大于等于 len 的。 创建slice   make 函数允许在运行期动态指定数组长度，绕开了数组类型必须使用编译期常量的限制。 silce := make( []int , 10) //创建一个len为10，cap大于len的切片 silce := make( []int , 0, 10) //创建一个len为0，cap为10的切片 silce := make( []int , 0) //创建一个空切片 var slice []int //创建一个nil切片   nil 切片被用在很多标准库和内置函数中，描述一个不存在的切片的时候，就需要用到 nil 切片。比如函数在发生异常的时候，返回的切片就是 nil 切片。nil 切片的指针指向 nil。   空切片一般会用来表示一个空的集合。比如数据库查询，一条结果也没有查到，那么就可以返回一个空切片 从 slice 中得到一块内存地址 s := make([]byte, 200) ptr := unsafe.Pointer(&s[0]) 从 Go 的内存地址中构造一个 slice var ptr unsafe.Pointer var s1 = struct { addr uintptr len int cap int }{ptr, length, length} s := *(*[]byte)(unsafe.Pointer(&s1)) 构造一个虚拟的结构体，把 slice 的数据结构拼出来。 当然还有更加直接的方法，在 Go 的反射中就存在一个与之对应的数据结构 SliceHeader，我们可以用它来构造一个 slice: var o []byte sliceHeader := (*reflect.SliceHeader)((unsafe.Pointer(&o))) sliceHeader.Cap = length sliceHeader.Len = length sliceHeader.Data = uintptr(ptr) slice扩容原理 扩容原则 如果切片的容量小于1024个元素，那么扩容的时候slice的cap就乘以2；一旦元素个数超过1024个元素，增长因子就变成1.25，即每次增加原来容量的四分之一。 如果扩容之后，还没有触及原数组的容量，那么，切片中的指针指向的位置，就还是原数组，如果扩容之后，超过了原数组的容量，那么，Go就会开辟一块新的内存，把原来的值拷贝过来，这种情况丝毫不会影响到原数组。 策略源码   源码位于go/src/runtime/slice.go中 func growslice(et *_type, old slice, cap int) slice { if raceenabled { callerpc := getcallerpc(unsafe.Pointer(&et)) racereadrangepc(old.array, uintptr(old.len*int(et.size)), callerpc, funcPC(growslice)) } if msanenabled { msanread(old.array, uintptr(old.len*int(et.size))) } if et.size == 0 { // 如果新要扩容的容量比原来的容量还要小，这代表要缩容了，那么可以直接报panic了。 if cap doublecap { newcap = cap } else { if old.len maxSliceCap(et.size) { panic(errorString(\"growslice: cap out of range\")) } var p unsafe.Pointer if et.kind&kindNoPointers != 0 { // 在老的切片后面继续扩充容量 p = mallocgc(capmem, nil, false) // 将 lenmem 这个多个 bytes 从 old.array地址 拷贝到 p 的地址处 memmove(p, old.array, lenmem) // 先将 P 地址加上新的容量得到新切片容量的地址，然后将新切片容量地址后面的 capmem-newlenmem 个 bytes 这块内存初始化。为之后继续 append() 操作腾出空间。 memclrNoHeapPointers(add(p, newlenmem), capmem-newlenmem) } else { // 重新申请新的数组给新切片 // 重新申请 capmen 这个大的内存地址，并且初始化为0值 p = mallocgc(capmem, et, true) if !writeBarrier.enabled { // 如果还不能打开写锁，那么只能把 lenmem 大小的 bytes 字节从 old.array 拷贝到 p 的地址处 memmove(p, old.array, lenmem) } else { // 循环拷贝老的切片的值 for i := uintptr(0); i 注意事项:  扩容扩大的容量都是针对原来的容量而言的，而不是针对原来数组的长度而言的。  扩容可能是在原来的地址后追加，也可能会生成全新的内存地址。 // 操作这种形式生成的切片非常危险，极易产生bug。 sliceB := sliceA[0:5] 代码示例 示例1:猜猜下面的代码会输出什么： package main import . \"fmt\" func main() { arr := make([]int, 5, 10) for i:=0; i 输出内容： arr:[0 0 10 0 0 0 1 2 100 4], len:10, cap:10, addr:0xc0000b2050 slice:[0 0 10 0 0 0 1 2 100 4], len:10, cap:10, addr:0xc0000b2050 slice2:[0 0 0 0 0 0 1 2 3 4 1000], len:11, cap:20, addr:0xc0000de000 slice3:[0 0 10], len:3, cap:10, addr:0xc0000b2050 slice4:[0 0 10 0 0 0 1 2], len:8, cap:10, addr:0xc0000b2050 Process finished with exit code 0 内存分析: 示例2:猜猜下面的代码会输出什么： package main import . \"fmt\" func main() { type Student struct { Name string Age int Score int } slice1 := []Student{ {\"张三\", 18, 0}, {\"李四\", 20, 0}, {\"王五\", 22, 0}} m := make(map[string]*Student, 0) for _, v := range slice1 { v.Score = 100 m[v.Name] = &v } Println(slice1) for k, v := range m { Println(k, v) } }   变量v为中间变量，可重复利用，对v取地址实际取的是同一个地址。  同样，更改变量v也不会影响到原切片的内容。输出内容： [{张三 18 0} {李四 20 0} {王五 22 0}] 张三 &{王五 22 100} 李四 &{王五 22 100} 王五 &{王五 22 100} Process finished with exit code 0 ...未完待续... var gitalk = new Gitalk({ \"clientID\": \"44d7c96f948be236a8c9\", \"clientSecret\": \"fb9fb3178db6640131c4e3eb69f9449e42bba661\", \"repo\": \"blog\", \"owner\": \"Zhang-jie-jun\", \"admin\": [\"Zhang-jie-jun\"], \"id\": location.pathname, \"distractionFreeMode\": false }); gitalk.render(\"gitalk-container\"); "},"src/golang/map.html":{"url":"src/golang/map.html","title":"map底层原理","keywords":"","body":"map底层原理 map简介 map是什么？ map是一堆键值对的未排序集合，类似Python中字典的概念，它的格式为map[keyType]valueType，是一个key-value的hash结构。map的读取和设置也类似slice一样，通过key来操作，只是slice的index只能是int类型，而map多了很多类型，可以是int，可以是string及所有完全定义了==与!=操作的类型。 在C++/Java中，map一般都以库的方式提供，比如在C++中是STL的std::map<>，在Java中是Hashmap<>，在这些语言中，如果要使用map，事先要引用相应的库。而在Go中，使用map不需要引入任何库，并且用起来也更加方便。 map声明 var 变量名 map[int]string // 声明一个key为int类型，值为string类型的map变量，未分配空间 map初始化 test1 := map[int]string {1:\"zhang san\", 2:\"li si\", 3:\"wang wu\"} // 直接初始化 test2 := make(map[int] string) // 通过make初始化 test3 := make(map[int] string, 10) // 通过make初始化，并指定map容量 make函数实际上会被编译器定位到调用 runtime.makemap()，主要做的工作就是初始化 hmap 结构体的各种字段，例如计算 B 的大小，设置哈希种子 hash0 等等。源码位于go/src/runtime/map.go中 // 这里的hint就是我们 make 时候后面指定的初始化长度. func makemap(t *maptype, hint int, h *hmap) *hmap { { //...... } // 找到一个 B，使得 map 的装载因子在正常范围内。 B := uint8(0) for overLoadFactor(hint, B) { B++ } h.B = B // 初始化 hash table // 如果 B 等于 0，那么 buckets 就会在赋值的时候再分配 if h.B != 0 { var nextOverflow *bmap h.buckets, nextOverflow = makeBucketArray(t, h.B, nil) if nextOverflow != nil { h.extra = new(mapextra) h.extra.nextOverflow = nextOverflow } } // 返回的h是*hmap指针(slice返回的是结构体对象) return h } map的实现原理 goalng的map底层原理实际上就是实现散列表(哈希表)，并使用拉链法解决hash冲突。但是go语言解决hash冲突主要还是依赖数组而不是链表。设计中采用分桶(Bucket)，每个桶里面存放多个key-value的思路进行性能优化。 map数据结构 map的数据结构是两个核心的结构体hmap与bmap，bmap里有两个数组分别用于存放key和value。hmap的定义如下： 源码位于go/src/runtime/map.go中 // A header for a Go map. type hmap struct { count int //map 中的元素个数，必须放在 struct 的第一个位置，因为内置的 len 函数会通过unsafe.Pointer会从这里读取。 flags uint8 // 状态标志 B uint8 // 可以最多容纳 6.5 * 2 ^ B 个元素，6.5为装载因子 noverflow uint16 // 溢出的个数 hash0 uint32 // 哈希种子 buckets unsafe.Pointer // 桶的地址，如果 count == 0 的话，可能是 nil oldbuckets unsafe.Pointer // 旧桶的地址，用于扩容 nevacuate uintptr // 搬迁进度，小于nevacuate的已经搬迁 have been evacuated) extra *mapextra // optional fields } bmap 就是我们常说的“bucket”结构，每个 bucket 里面最多存储 8 个 key，这些 key 之所以会落入同一个桶，是因为它们经过哈希计算后，哈希结果是“一类”的。在桶内，又会根据 key 计算出来的 hash 值的高 8 位来决定 key 到底落入桶内的哪个位置（一个桶内最多有8个位置）。 // A bucket for a Go map. type bmap struct { // 每个元素hash值的高8位，如果tophash[0] 上面这个数据结构并不是 golang runtime 时的结构，在编译时候编译器会给它动态创建一个新的结构，如下： type bmap struct { topbits [8]uint8 // 每个元素hash值的高8位 keys [8]keytype // 存放key的数组 values [8]valuetype // 存放value的数组 pad uintptr // 为了内存对齐的补充字段，无实际作用 overflow uintptr // 溢出桶的地址 } 当 map 的 key 和 value 都不是指针，并且 size 都小于 128 字节的情况下，会把 bmap 标记为不含指针，这样可以避免 gc 时扫描整个 hmap。但是，我们看 bmap 其实有一个 overflow 的字段，是指针类型的，破坏了 bmap 不含指针的设想，这时会把 overflow 移动到 extra 字段来。 // mapextra holds fields that are not present on all maps. type mapextra struct { // If both key and elem do not contain pointers and are inline, then we mark bucket // type as containing no pointers. This avoids scanning such maps. // However, bmap.overflow is a pointer. In order to keep overflow buckets // alive, we store pointers to all overflow buckets in hmap.extra.overflow and hmap.extra.oldoverflow. // overflow and oldoverflow are only used if key and elem do not contain pointers. // overflow contains overflow buckets for hmap.buckets. // oldoverflow contains overflow buckets for hmap.oldbuckets. // The indirection allows to store a pointer to the slice in hiter. overflow *[]*bmap oldoverflow *[]*bmap // nextOverflow holds a pointer to a free overflow bucket. nextOverflow *bmap } map内存模型 bmap 是存放 k-v 的地方，bmap的存储分布如下：这里可以看到bmap(bucket)的kv分布分开的，没有按照常规的kv/kv/kv…这种方式存储。源码里说这样的好处是在某些情况下可以省略掉 pad 字段，节省内存空间。 每个 bucket 设计成最多只能放 8 个 key-value 对，如果有第 9 个 key-value 落入当前的 bucket，那就需要再构建一个 bucket ，通过 overflow 指针连接起来。 key定位与hash碰撞 对于map来说，如何通过key定位到实际的value，是性能与体验的关键指标。 在golang的map中，key经过hash计算后得到哈希值，哈希值是 64 个 bit 位（针对64位机）。根据hash值的最后B个bit位来确定这个key落在哪个桶。 如果 B = 5，那么桶的数量，也就是 buckets 数组的长度是 2^5 = 32。 比如说，现在有一个key经过哈希函数计算后，得到如下的哈希结果： 10010111 | 000011110110110010001111001010100010010110010101010 │ 01010 用最后的 5 个 bit 位，也就是 01010，值为 10，也就是 10 号桶。这个操作实际上就是取余操作，但是取余开销太大，所以代码实现上用的位操作代替。再用哈希值的高 8 位，找到此 key 在 bucket 中的位置，这是在寻找已有的 key。最开始桶内还没有 key，新加入的 key 会找到第一个空位放入。 buckets 编号就是桶编号，当两个不同的 key 落在同一个桶中，也就是发生了哈希冲突。冲突的解决手段是用拉链法(链表法)：在 bucket 中，从前往后找到第一个空位。这样，在查找某个 key 时，先找到对应的桶，再去遍历 bucket 中的 key。检索原理如下：上图中，假定 B = 5，所以 bucket 总数就是 2^5 = 32。首先计算出待查找 key 的哈希，使用低 5 位 00110，找到对应的 6 号 bucket，使用高 8 位 10010111，对应十进制 151，在 6 号 bucket 中 遍历bucket 寻找 tophash 值（HOB hash）为 151 的 key，找到了 2 号槽位，这样整个查找过程就结束了。 如果在 bucket 中没找到，并且 overflow 不为空，还要继续去 overflow bucket 中寻找，直到找到或是所有的 key 槽位都找遍了，包括所有的 overflow bucket(这里需要遍历bucket数组中某个槽位的bucket链表的所有bucket)。源码位于go/src/runtime/map.go中 // mapaccess1 returns a pointer to h[key]. Never returns nil, instead // it will return a reference to the zero object for the elem type if // the key is not in the map. func mapaccess1(t *maptype, h *hmap, key unsafe.Pointer) unsafe.Pointer { //......校验逻辑 //如果 h 什么都没有，返回value类型的零值 if h == nil || h.count == 0 { if t.hashMightPanic() { t.key.alg.hash(key, 0) // see issue 23734 } return unsafe.Pointer(&zeroVal[0]) } // 并发写冲突 if h.flags&hashWriting != 0 { throw(\"concurrent map read and map write\") } // 不同类型 key 使用的 hash 算法在编译期确定 alg := t.key.alg hash := alg.hash(key, uintptr(h.hash0)) // 求低 B 位的掩码. // 比如 B=5，那 m 就是31，低五位二进制是全1 m := bucketMask(h.B) // b 就是 当前key对应的 bucket 的地址 b := (*bmap)(add(h.buckets, (hash&m)*uintptr(t.bucketsize))) // oldbuckets 不为 nil，说明发生了扩容 if c := h.oldbuckets; c != nil { if !h.sameSizeGrow() { // There used to be half as many buckets; mask down one more power of two. m >>= 1 } // 求出 key 在老的 map 中的 bucket 位置 oldb := (*bmap)(add(c, (hash&m)*uintptr(t.bucketsize))) // 如果 oldb 没有搬迁到新的 bucket // 那就在老的 bucket 中寻找 if !evacuated(oldb) { b = oldb } } // 计算出高 8 位的 hash // 相当于右移 56 位，只取高8位 top := tophash(hash) // 这里进入bucket的二层循环找到对应的kv(第一层是bucket,第二层是bucket内部的8个slot) bucketloop: // 遍历bucket以及overflow链表 for ; b != nil; b = b.overflow(t) { //遍历bucket的8个slot for i := uintptr(0); i 函数返回 h[key] 的指针，如果 h 中没有此 key，那就会返回一个 key 相应类型的零值，不会返回 nil。 定位 key 和 value 的方法： // key 定位公式 k := add(unsafe.Pointer(b), dataOffset+i*uintptr(t.keysize)) // value 定位公式 v := add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.keysize)+i*uintptr(t.valuesize)) b 是 bmap 的地址，dataOffset 是 key 相对于 bmap 起始地址的偏移。 因此 bucket 里 key 的起始地址就是 unsafe.Pointer(b)+dataOffset。第 i 个 key 的地址就要在此基础上跨过 i 个 key 的大小；而我们又知道，value 的地址是在所有 key 之后，因此第 i 个 value 的地址还需要加上所有 key 的偏移。 当定位到一个具体的 bucket 时，里层循环就是遍历这个 bucket 里所有的 cell，或者说所有的槽位，也就是 bucketCnt=8 个槽位。整个循环过程：再说一下 minTopHash，当一个 cell 的 tophash 值小于 minTopHash 时，标志这个 cell 的迁移状态。因为这个状态值是放在 tophash 数组里，为了和正常的哈希值区分开，会给 key 计算出来的哈希值一个增量：minTopHash。这样就能区分正常的 top hash 值和表示状态的哈希值。 下面的这几种状态就表征了 bucket 的情况： emptyRest = 0 // this cell is empty, and there are no more non-empty cells at higher indexes or overflows. emptyOne = 1 // this cell is empty // 扩容相关 evacuatedX = 2 // key/elem is valid. Entry has been evacuated to first half of larger table. // 扩容相关 evacuatedY = 3 // same as above, but evacuated to second half of larger table. evacuatedEmpty = 4 // cell is empty, bucket is evacuated. minTopHash = 5 // minimum tophash for a normal filled cell. 源码里判断这个 bucket 是否已经搬迁完毕，用到的函数： func evacuated(b *bmap) bool { h := b.tophash[0] return h > emptyOne && h 只取了 tophash 数组的第一个值，判断它是否在 1-5 之间。对比上面的常量，当 top hash 是 evacuatedEmpty、evacuatedX、evacuatedY 这三个值之一，说明此 bucket 中的 key 全部被搬迁到了新 bucket。 map扩容原理 使用 key 的 hash 值可以快速定位到目标 key，然而，随着向 map 中添加的 key 越来越多，key 发生碰撞的概率也越来越大。bucket 中的 8 个 cell 会被逐渐塞满，查找、插入、删除 key 的效率也会越来越低。最理想的情况是一个 bucket 只装一个 key，这样，就能达到 O(1) 的效率，但这样空间消耗太大，用空间换时间的代价太高。 Go 语言采用一个 bucket 里装载 8 个 key，定位到某个 bucket 后，还需要再定位到具体的 key，这实际上又用了时间换空间。当然，这样做，要有一个度，不然所有的 key 都落在了同一个 bucket 里，直接退化成了链表，各种操作的效率直接降为 O(n)，是不行的。 因此，需要有一个指标来衡量前面描述的情况，这就是装载因子。 Go 源码里这样定义装载因子： loadFactor := count / (2^B) // count 就是 map 的元素个数，2^B 表示 bucket 数量。 再来说触发 map 扩容的条件，在向 map 插入新 key 的时候，会进行条件检测。 符合下面这 2 个条件，就会触发扩容。 载因子超过阈值，源码里定义的阈值是 6.5。 overflow 的 bucket 数量过多，这有两种情况：(1) 当 B 大于15时，也就是 bucket 总数大于 2^15 时，如果overflow的bucket数量大于2^15，就触发扩容。(2)当B小于15时，如果overflow的bucket数量大于2^B 也会触发扩容。 通过汇编语言可以找到赋值操作对应源码中的函数是 mapassign，对应扩容条件的源码如下： 源码位于go/src/runtime/map.go中 // 触发扩容时机 if !h.growing() && (overLoadFactor(h.count+1, h.B) || tooManyOverflowBuckets(h.noverflow, h.B)) { hashGrow(t, h) goto again // Growing the table invalidates everything, so try again } // overLoadFactor reports whether count items placed in 1 bucketCnt && uintptr(count) > loadFactorNum*(bucketShift(B)/loadFactorDen) } // tooManyOverflowBuckets reports whether noverflow buckets is too many for a map with 1 15 { B = 15 } // The compiler doesn't see here that B = uint16(1) 第 1 点：我们知道，每个 bucket 有 8 个空位，在没有溢出，且所有的桶都装满了的情况下，装载因子算出来的结果是 8。因此当装载因子超过 6.5 时，表明很多 bucket 都快要装满了，查找效率和插入效率都变低了。在这个时候进行扩容是有必要的。 第 2 点：是对第 1 点的补充。就是说在装载因子比较小的情况下，这时候 map 的查找和插入效率也很低，而第 1 点识别不出来这种情况。表面现象就是计算装载因子的分子比较小，即 map 里元素总数少，但是 bucket 数量多（真实分配的 bucket 数量多，包括大量的 overflow bucket）。 不难想像造成这种情况的原因：不停地插入、删除元素。先插入很多元素，导致创建了很多 bucket，但是装载因子达不到第 1 点的临界值，未触发扩容来缓解这种情况。之后，删除元素降低元素总数量，再插入很多元素，导致创建很多的 overflow bucket，但就是不会触犯第 1 点的规定，你能拿我怎么办？overflow bucket 数量太多，导致 key 会很分散，查找插入效率低得吓人， 因此出台第 2 点规定。这就像是一座空城，房子很多，但是住户很少，都分散了，找起人来很困难。 对于命中条件 1，2 的限制，都会发生扩容。 但是扩容的策略并不相同，毕竟两种条件应对的场景不同。 对于条件 1，元素太多，而 bucket 数量太少，很简单：将 B 加 1，bucket 最大数量 (2^B) 直接变成原来 bucket 数量的 2 倍。于是，就有新老 bucket 了。注意，这时候元素都在老 bucket 里，还没迁移到新的 bucket 来。而且，新 bucket 只是最大数量变为原来最大数量（2^B）的 2 倍（2^B * 2）。 对于条件 2，其实元素没那么多，但是 overflow bucket 数特别多，说明很多 bucket 都没装满。解决办法就是开辟一个新 bucket 空间，将老 bucket 中的元素移动到新 bucket，使得同一个 bucket 中的 key 排列地更紧密。这样，原来，在 overflow bucket 中的 key 可以移动到 bucket 中来。结果是节省空间，提高 bucket 利用率，map 的查找和插入效率自然就会提升。 对于条件 2 的解决方案，有一个极端的情况：如果插入 map 的 key 哈希都一样，就会落到同一个 bucket 里，超过 8 个就会产生 overflow bucket，结果也会造成 overflow bucket 数过多。移动元素其实解决不了问题，因为这时整个哈希表已经退化成了一个链表，操作效率变成了 O(n)。 前面说了扩容的条件，下面看一下扩容到底是怎么做的：由于 map 扩容需要将原有的 key/value 重新搬迁到新的内存地址，如果有大量的 key/value 需要搬迁，在搬迁过程中map会阻塞，非常影响性能。因此 Go map 的扩容采取了一种称为 “渐进式” 的方式，原有的 key 并不会一次性搬迁完毕，每次最多只会搬迁 2 个bucket。 上面说的 hashGrow() 函数实际上并没有真正地“搬迁”，它只是分配好了新的 buckets，并将老的 buckets 挂到了新的map的 oldbuckets 字段上。真正搬迁 buckets 的动作在 growWork() 函数中，而调用 growWork() 函数的动作是在 mapassign 和 mapdelete 函数中。也就是插入或修改、删除 key 的时候，都会尝试进行搬迁 buckets 的工作。先检查 oldbuckets 是否搬迁完毕，具体来说就是检查 oldbuckets 是否为 nil。 先看 hashGrow() 函数所做的工作，再来看具体的搬迁 buckets 是如何进行的。 func hashGrow(t *maptype, h *hmap) { // B+1 相当于是原来 2 倍的空间 bigger := uint8(1) // 对应于等容扩容 if !overLoadFactor(h.count+1, h.B) { // 进行等量的内存扩容，所以 B 不变 bigger = 0 h.flags |= sameSizeGrow } oldbuckets := h.buckets // 申请新的 buckets 空间 newbuckets, nextOverflow := makeBucketArray(t, h.B+bigger, nil) flags := h.flags &^ (iterator | oldIterator) if h.flags&iterator != 0 { flags |= oldIterator } // commit the grow (atomic wrt gc) h.B += bigger h.flags = flags h.oldbuckets = oldbuckets h.buckets = newbuckets // 当前搬迁进度为0 h.nevacuate = 0 h.noverflow = 0 //...... } 主要是申请到了新的 buckets 空间，把相关的标志位都进行了处理：例如标志 nevacuate 被置为 0， 表示当前搬迁进度为 0。 需要特别提一下的是h.flags的操作： flags := h.flags &^ (iterator | oldIterator) if h.flags&iterator != 0 { flags |= oldIterator } 这里得先说下运算符：&^。这叫按位置 0运算符。例如： x = 01010011 y = 01010100 z = x &^ y = 00000011 如果 y bit 位为 1，那么结果 z 对应 bit 位就为 0，否则 z 对应 bit 位就和 x 对应 bit 位的值相同。 所以上面那段对 flags 一顿操作的代码的意思是：先把 h.flags 中 iterator 和 oldIterator 对应位清 0，然后如果发现 iterator 位为 1，那就把它转接到 oldIterator 位，使得 oldIterator 标志位变成 1。潜台词就是：buckets 现在挂到了 oldBuckets 名下了，对应的标志位也转接过去。 几个标志位如下： // 可能有迭代器使用 buckets iterator = 1 // 可能有迭代器使用 oldbuckets oldIterator = 2 // 有协程正在并发的向 map 中写入 key hashWriting = 4 // 等量扩容（对应条件 2） sameSizeGrow = 8 再来看看真正执行搬迁工作的 growWork() 函数。 func growWork(t *maptype, h *hmap, bucket uintptr) { // 确认搬迁老的 bucket 对应正在使用的 bucket evacuate(t, h, bucket&h.oldbucketmask()) // 再搬迁一个 bucket，以加快搬迁进程 if h.growing() { evacuate(t, h, h.nevacuate) } } h.growing() 函数非常简单： func (h *hmap) growing() bool { return h.oldbuckets != nil } 如果 oldbuckets 不为空，说明还没有搬迁完毕，还得继续搬。 bucket&h.oldbucketmask() 这行代码，如源码注释里说的，是为了确认搬迁的 bucket 是我们正在使用的 bucket。oldbucketmask() 函数返回扩容前的 map 的 bucketmask。 所谓的 bucketmask，作用就是将 key 计算出来的哈希值与 bucketmask 相&，得到的结果就是 key 应该落入的桶。比如 B = 5，那么 bucketmask 的低 5 位是 11111，其余位是 0，hash 值与其相与的意思是，只有 hash 值的低 5 位决策 key 到底落入哪个 bucket。 接下来，重点放在搬迁的关键函数 evacuate。源码如下： // oldbucket是 func evacuate(t *maptype, h *hmap, oldbucket uintptr) { // 获取old bucket 的地址 b := (*bmap)(add(h.oldbuckets, oldbucket*uintptr(t.bucketsize))) newbit := h.noldbuckets() if !evacuated(b) { // TODO: reuse overflow buckets instead of using new ones, if there // is no iterator using the old buckets. (If !oldIterator.) // xy contains the x and y (low and high) evacuation destinations. // X和Y分别代表，如果是2倍扩容时，对应的前半部分和后半部分 var xy [2]evacDst x := &xy[0] // 默认是等 size 扩容，前后 bucket 序号不变 x.b = (*bmap)(add(h.buckets, oldbucket*uintptr(t.bucketsize))) x.k = add(unsafe.Pointer(x.b), dataOffset) x.e = add(x.k, bucketCnt*uintptr(t.keysize)) if !h.sameSizeGrow() { // Only calculate y pointers if we're growing bigger. // Otherwise GC can see bad pointers. // 如果不是等 size 扩容，前后 bucket 序号有变 // 使用 y 来进行搬迁 y := &xy[1] y.b = (*bmap)(add(h.buckets, (oldbucket+newbit)*uintptr(t.bucketsize))) y.k = add(unsafe.Pointer(y.b), dataOffset) y.e = add(y.k, bucketCnt*uintptr(t.keysize)) } // 遍历所有的 bucket，包括 overflow buckets // b 是老的 bucket 地址 for ; b != nil; b = b.overflow(t) { k := add(unsafe.Pointer(b), dataOffset) e := add(k, bucketCnt*uintptr(t.keysize)) for i := 0; i 搬迁的目的就是将老的 buckets 搬迁到新的 buckets。而通过前面的说明我们知道，应对条件 1，新的 buckets 数量是之前的一倍，应对条件 2，新的 buckets 数量和之前相等。 对于条件 1，从老的 buckets 搬迁到新的 buckets，由于 bucktes 数量不变，因此可以按序号来搬，比如原来在 0 号 bucktes，到新的地方后，仍然放在 0 号 buckets。 对于条件 2，就没这么简单了。要重新计算 key 的哈希，才能决定它到底落在哪个 bucket。例如，原来 B = 5，计算出 key 的哈希后，只用看它的低 5 位，就能决定它落在哪个 bucket。扩容后，B 变成了 6，因此需要多看一位，它的低 6 位决定 key 落在哪个 bucket。这称为 rehash。 因此，某个 key 在搬迁前后 bucket 序号可能和原来相等，也可能是相比原来加上 2^B（原来的 B 值），取决于 hash 值 第 6 bit 位是 0 还是 1。 理解了上面 bucket 序号的变化，我们就可以回答另一个问题了：为什么遍历 map 是无序的？ map 在扩容后，会发生 key 的搬迁，原来落在同一个 bucket 中的 key，搬迁后，有些 key 就要远走高飞了（bucket 序号加上了 2^B）。而遍历的过程，就是按顺序遍历 bucket，同时按顺序遍历 bucket 中的 key。搬迁后，key 的位置发生了重大的变化，有些 key 飞上高枝，有些 key 则原地不动。这样，遍历 map 的结果就不可能按原来的顺序了。 当然，如果我就一个 hard code 的 map，我也不会向 map 进行插入删除的操作，按理说每次遍历这样的 map 都会返回一个固定顺序的 key/value 序列吧。的确是这样，但是 Go 杜绝了这种做法，因为这样会给新手程序员带来误解，以为这是一定会发生的事情，在某些情况下，可能会酿成大错。 当然，Go 做得更绝，当我们在遍历 map 时，并不是固定地从 0 号 bucket 开始遍历，每次都是从一个随机值序号的 bucket 开始遍历，并且是从这个 bucket 的一个随机序号的 cell 开始遍历。这样，即使你是一个写死的 map，仅仅只是遍历它，也不太可能会返回一个固定序列的 key/value 对了。 再明确一个问题：如果扩容后，B 增加了 1，意味着 buckets 总数是原来的 2 倍，原来 1 号的桶“裂变”到两个桶。 例如，原始 B = 2，1号 bucket 中有 2 个 key 的哈希值低 3 位分别为：010，110。由于原来 B = 2，所以低 2 位 10 决定它们落在 2 号桶，现在 B 变成 3，所以 010、110 分别落入 2、6 号桶。 再来讲搬迁函数中的几个关键点： evacuate 函数每次只完成一个 bucket 的搬迁工作，因此要遍历完此 bucket 的所有的 cell，将有值的 cell copy 到新的地方。bucket 还会链接 overflow bucket，它们同样需要搬迁。因此会有 2 层循环，外层遍历 bucket 和 overflow bucket，内层遍历 bucket 的所有 cell。这样的循环在 map 的源码里到处都是，要理解透了。 源码里提到 X, Y part，其实就是我们说的如果是扩容到原来的 2 倍，桶的数量是原来的 2 倍，前一半桶被称为 X part，后一半桶被称为 Y part。一个 bucket 中的 key 可能会分裂落到 2 个桶，一个位于 X part，一个位于 Y part。所以在搬迁一个 cell 之前，需要知道这个 cell 中的 key 是落到哪个 Part。很简单，重新计算 cell 中 key 的 hash，并向前“多看”一位，决定落入哪个 Part，这个前面也说得很详细了。 有一个特殊情况是：有一种 key，每次对它计算 hash，得到的结果都不一样。这个 key 就是 math.NaN() 的结果，它的含义是 not a number，类型是 float64。当它作为 map 的 key，在搬迁的时候，会遇到一个问题：再次计算它的哈希值和它当初插入 map 时的计算出来的哈希值不一样！ 你可能想到了，这样带来的一个后果是，这个 key 是永远不会被 Get 操作获取的！当我使用 m[math.NaN()] 语句的时候，是查不出来结果的。这个 key 只有在遍历整个 map 的时候，才有机会现身。所以，可以向一个 map 插入任意数量的 math.NaN() 作为 key。 当搬迁碰到 math.NaN() 的 key 时，只通过 tophash 的最低位决定分配到 X part 还是 Y part（如果扩容后是原来 buckets 数量的 2 倍）。如果 tophash 的最低位是 0 ，分配到 X part；如果是 1 ，则分配到 Y part。 确定了要搬迁到的目标 bucket 后，搬迁操作就比较好进行了。将源 key/value 值 copy 到目的地相应的位置。 设置 key 在原始 buckets 的 tophash 为 evacuatedX 或是 evacuatedY，表示已经搬迁到了新 map 的 x part 或是 y part。新 map 的 tophash 则正常取 key 哈希值的高 8 位。 下面通过图来宏观地看一下扩容前后的变化。 扩容前，B = 2，共有 4 个 buckets，lowbits 表示 hash 值的低位。假设我们不关注其他 buckets 情况，专注在 2 号 bucket。并且假设 overflow 太多，触发了等量扩容（对应于前面的条件 2）。扩容完成后，overflow bucket 消失了，key 都集中到了一个 bucket，更为紧凑了，提高了查找的效率。假设触发了 2 倍的扩容，那么扩容完成后，老 buckets 中的 key 分裂到了 2 个 新的 bucket。一个在 x part，一个在 y 的 part。依据是 hash 的 lowbits。新 map 中 0-3 称为 x part，4-7 称为 y part。 注意，上面的两张图忽略了其他 buckets 的搬迁情况，表示所有的 bucket 都搬迁完毕后的情形。实际上，我们知道，搬迁是一个“渐进”的过程，并不会一下子就全部搬迁完毕。所以在搬迁过程中，oldbuckets 指针还会指向原来老的 []bmap，并且已经搬迁完毕的 key 的 tophash 值会是一个状态值，表示 key 的搬迁去向。 map访问与迭代 访问 map 中插入或者修改 key，最终调用的是 mapassign 函数(实际上插入或修改 key 的语法是一样的，只不过前者操作的 key 在 map 中不存在，而后者操作的 key 存在 map 中)。 mapassign 函数是访问元素的关键，mapassign 有一个系列的函数，根据 key 类型的不同，编译器会将其优化为相应的“快速函数”。整体来看，流程非常得简单：对 key 计算 hash 值，根据 hash 值按照之前的流程，找到要赋值的位置（可能是插入新 key，也可能是更新老 key），对相应位置进行赋值。 函数首先会检查 map 的标志位 flags。如果 flags 的写标志位此时被置 1 了，说明有其他协程在执行“写”操作，进而导致程序 panic。这也说明了 map 对协程是不安全的。 在正式安置 key 之前，还要检查 map 的状态，看它是否需要进行扩容。如果满足扩容的条件，就主动触发一次扩容操作。 最后，会更新 map 相关的值，如果是插入新 key，map 的元素数量字段 count 值会加 1；在函数之初设置的 hashWriting 写标志出会清零。 函数的原型并没有传入 value 值，所以赋值操作是什么时候执行的呢？mapassign 函数返回的指针就是指向的 key 所对应的 value 值位置，有了地址，就很好操作赋值了。 迭代 本来 map 的遍历过程比较简单：遍历所有的 bucket 以及它后面挂的 overflow bucket，然后挨个遍历 bucket 中的所有 cell。每个 bucket 中包含 8 个 cell，从有 key 的 cell 中取出 key 和 value，这个过程就完成了。 但是，现实并没有这么简单。还记得前面讲过的扩容过程吗？扩容过程不是一个原子的操作，它每次最多只搬运 2 个 bucket，所以如果触发了扩容操作，那么在很长时间里，map 的状态都是处于一个中间态：有些 bucket 已经搬迁到新家，而有些 bucket 还待在老地方。 因此，遍历如果发生在扩容的过程中，就会涉及到遍历新老 bucket 的过程，这是难点所在。 一个简单的代码样例，假装不知道遍历过程具体调用的是什么函数： package main import \"fmt\" func main() { ageMp := make(map[string]int) ageMp[\"qcrao\"] = 18 for name, age := range ageMp { fmt.Println(name, age) } } 执行命令： go tool compile -S main.go 得到关键的几行汇编代码如下： // ...... 0x0124 00292 (test16.go:9) CALL runtime.mapiterinit(SB) // ...... 0x01fb 00507 (test16.go:9) CALL runtime.mapiternext(SB) 0x0200 00512 (test16.go:9) MOVQ \"\"..autotmp_4+160(SP), AX 0x0208 00520 (test16.go:9) TESTQ AX, AX 0x020b 00523 (test16.go:9) JNE 302 // ...... 关于 map 迭代，底层的函数调用关系是调用 mapiterinit 函数初始化迭代器，然后循环调用 mapiternext 函数进行 map 迭代。 迭代器的结构体定义： type hiter struct { key unsafe.Pointer // Must be in first position. Write nil to indicate iteration end (see cmd/internal/gc/range.go). elem unsafe.Pointer // Must be in second position (see cmd/internal/gc/range.go). t *maptype h *hmap buckets unsafe.Pointer // bucket ptr at hash_iter initialization time bptr *bmap // current bucket overflow *[]*bmap // keeps overflow buckets of hmap.buckets alive oldoverflow *[]*bmap // keeps overflow buckets of hmap.oldbuckets alive startBucket uintptr // bucket iteration started at offset uint8 // intra-bucket offset to start from during iteration (should be big enough to hold bucketCnt-1) wrapped bool // already wrapped around from end of bucket array to beginning B uint8 i uint8 bucket uintptr checkBucket uintptr } mapiterinit 就是对 hiter 结构体里的字段进行初始化赋值操作。 前面已经提到过，即使是对一个写死的 map 进行遍历，每次出来的结果也是无序的。下面我们就可以近距离地观察他们的实现: // 生成随机数 r r := uintptr(fastrand()) if h.B > 31-bucketCntBits { r += uintptr(fastrand()) > h.B & (bucketCnt - 1)) 例如，B = 2，那 uintptr(1) 于是，在 mapiternext 函数中就会从 it.startBucket 的 it.offset 号的 cell 开始遍历，取出其中的 key 和 value，直到又回到起点 bucket，完成遍历过程。 假设我们有下图所示的一个 map，起始时 B = 1，有两个 bucket，后来触发了扩容（这里不要深究扩容条件，只是一个设定），B 变成 2。并且， 1 号 bucket 中的内容搬迁到了新的 bucket，1 号裂变成 1 号和 3 号；0 号 bucket 暂未搬迁。老的 bucket 挂在在 oldbuckets 指针上面，新的 bucket 则挂在 buckets 指针上面。这时，我们对此 map 进行遍历。假设经过初始化后，startBucket = 3，offset = 2。于是，遍历的起点将是 3 号 bucket 的 2 号 cell。下面这张图就是开始遍历时的状态：标红的表示起始位置，bucket 遍历顺序为：3 -> 0 -> 1 -> 2。因为 3 号 bucket 对应老的 1 号 bucket，因此先检查老 1 号 bucket 是否已经被搬迁过。判断方法就是： func evacuated(b *bmap) bool { h := b.tophash[0] return h > emptyOne && h 如果 b.tophash[0] 的值在标志值范围内，即在 (1,5) 区间里，说明已经被搬迁过了。 emptyRest = 0 // this cell is empty, and there are no more non-empty cells at higher indexes or overflows. emptyOne = 1 // this cell is empty evacuatedX = 2 // key/elem is valid. Entry has been evacuated to first half of larger table. evacuatedY = 3 // same as above, but evacuated to second half of larger table. evacuatedEmpty = 4 // cell is empty, bucket is evacuated. minTopHash = 5 // minimum tophash for a normal filled cell. 在本例中，老 1 号 bucket 已经被搬迁过了。所以它的 tophash[0] 值在 (1,5) 范围内，因此只用遍历新的 3 号 bucket。依次遍历 3 号 bucket 的 cell，这时候会找到第一个非空的 key：元素 e。到这里，mapiternext 函数返回，这时我们的遍历结果仅有一个元素：由于返回的 key 不为空，所以会继续调用 mapiternext 函数。 继续从上次遍历到的地方往后遍历，从新 3 号 overflow bucket 中找到了元素 f 和 元素 g。 遍历结果集也因此壮大： 新 3 号 bucket 遍历完之后，回到了新 0 号 bucket。0 号 bucket 对应老的 0 号 bucket，经检查，老 0 号 bucket 并未搬迁，因此对新 0 号 bucket 的遍历就改为遍历老 0 号 bucket。那是不是把老 0 号 bucket 中的所有 key 都取出来呢？ 并没有这么简单，回忆一下，老 0 号 bucket 在搬迁后将裂变成 2 个 bucket：新 0 号、新 2 号。而我们此时正在遍历的只是新 0 号 bucket（注意，遍历都是遍历的 *bucket 指针，也就是所谓的新 buckets）。所以，我们只会取出老 0 号 bucket 中那些在裂变之后，分配到新 0 号 bucket 中的那些 key。 因此，lowbits == 00 的将进入遍历结果集：和之前的流程一样，继续遍历新 1 号 bucket，发现老 1 号 bucket 已经搬迁，只用遍历新 1 号 bucket 中现有的元素就可以了。结果集变成：继续遍历新 2 号 bucket，它来自老 0 号 bucket，因此需要在老 0 号 bucket 中那些会裂变到新 2 号 bucket 中的 key，也就是 lowbit == 10 的那些 key。 这样，遍历结果集变成：最后，继续遍历到新 3 号 bucket 时，发现所有的 bucket 都已经遍历完毕，整个迭代过程执行完毕。 顺便说一下，如果碰到 key 是 math.NaN() 这种的，处理方式类似。核心还是要看它被分裂后具体落入哪个 bucket。只不过只用看它 top hash 的最低位。如果 top hash 的最低位是 0 ，分配到 X part；如果是 1 ，则分配到 Y part。据此决定是否取出 key，放到遍历结果集里。 map 遍历的核心在于理解 2 倍扩容时，老 bucket 会分裂到 2 个新 bucket 中去。而遍历操作，会按照新 bucket 的序号顺序进行，碰到老 bucket 未搬迁的情况时，要在老 bucket 中找到将来要搬迁到新 bucket 来的 key。 map常见面试点 map的实现原理 详细说一下拉链法(链地址法) map是协程安全的吗？map 并不是一个线程安全的数据结构。同时读写一个 map 是未定义的行为，如果被检测到，会直接 panic。一般而言，这可以通过读写锁来解决：sync.RWMutex。读之前调用 RLock() 函数，读完之后调用 RUnlock() 函数解锁；写之前调用 Lock() 函数，写完之后，调用 Unlock() 解锁。另外，sync.Map 是线程安全的 map，可以使用。 map遍历是有序的吗？为什么？map 在扩容后，会发生 key 的搬迁，原来落在同一个 bucket 中的 key，搬迁后，有些 key 就要远走高飞了（bucket 序号加上了 2^B）。而遍历的过程，就是按顺序遍历 bucket，同时按顺序遍历 bucket 中的 key。搬迁后，key 的位置发生了重大的变化，有些 key 飞上高枝，有些 key 则原地不动。这样，遍历 map 的结果就不可能按原来的顺序了。当然，Go 做得更绝，当我们在遍历 map 时，并不是固定地从 0 号 bucket 开始遍历，每次都是从一个随机值序号的 bucket 开始遍历，并且是从这个 bucket 的一个随机序号的 cell 开始遍历。这样，即使你是一个写死的 map，仅仅只是遍历它，也不太可能会返回一个固定序列的 key/value 对了。 可以边遍历边删除吗？不可以，map 并不是一个线程安全的数据结构。 key 可以是 float 型吗？从语法上看，是可以的。Go 语言中只要是可比较的类型都可以作为 key。除开 slice，map，functions 这几种类型，其他类型都是 OK 的。具体包括：布尔值、数字、字符串、指针、通道、接口类型、结构体、只包含上述类型的数组。这些类型的共同特征是支持== 和 != 操作符，k1 == k2 时，可认为 k1 和 k2 是同一个 key。如果是结构体，则需要它们的字段值都相等，才被认为是相同的 key。顺便说一句，任何类型都可以作为 value，包括 map 类型。最后说结论：float 型可以作为 key，但是由于精度的问题，会导致一些诡异的问题，慎用之。 参考资料 Golang map实践以及实现原理由浅到深，入门Go语言Map实现原理Golang map底层实现原理解析浅析Golang map的实现原理 ...未完待续... var gitalk = new Gitalk({ \"clientID\": \"44d7c96f948be236a8c9\", \"clientSecret\": \"fb9fb3178db6640131c4e3eb69f9449e42bba661\", \"repo\": \"blog\", \"owner\": \"Zhang-jie-jun\", \"admin\": [\"Zhang-jie-jun\"], \"id\": location.pathname, \"distractionFreeMode\": false }); gitalk.render(\"gitalk-container\"); "},"src/golang/reflect.html":{"url":"src/golang/reflect.html","title":"反射机制","keywords":"","body":"反射机制 ...未完待续... var gitalk = new Gitalk({ \"clientID\": \"44d7c96f948be236a8c9\", \"clientSecret\": \"fb9fb3178db6640131c4e3eb69f9449e42bba661\", \"repo\": \"blog\", \"owner\": \"Zhang-jie-jun\", \"admin\": [\"Zhang-jie-jun\"], \"id\": location.pathname, \"distractionFreeMode\": false }); gitalk.render(\"gitalk-container\"); "},"src/golang/context.html":{"url":"src/golang/context.html","title":"context详解","keywords":"","body":"context详解 ...未完待续... var gitalk = new Gitalk({ \"clientID\": \"44d7c96f948be236a8c9\", \"clientSecret\": \"fb9fb3178db6640131c4e3eb69f9449e42bba661\", \"repo\": \"blog\", \"owner\": \"Zhang-jie-jun\", \"admin\": [\"Zhang-jie-jun\"], \"id\": location.pathname, \"distractionFreeMode\": false }); gitalk.render(\"gitalk-container\"); "},"src/golang/ut.html":{"url":"src/golang/ut.html","title":"单元测试","keywords":"","body":"单元测试 ...未完待续... var gitalk = new Gitalk({ \"clientID\": \"44d7c96f948be236a8c9\", \"clientSecret\": \"fb9fb3178db6640131c4e3eb69f9449e42bba661\", \"repo\": \"blog\", \"owner\": \"Zhang-jie-jun\", \"admin\": [\"Zhang-jie-jun\"], \"id\": location.pathname, \"distractionFreeMode\": false }); gitalk.render(\"gitalk-container\"); "},"src/c++/":{"url":"src/c++/","title":"C/C++","keywords":"","body":"C/C++   C++ 是一种静态类型的、编译式的、通用的、大小写敏感的、不规则的编程语言，支持过程化编程、面向对象编程和泛型编程。  C++ 被认为是一种中级语言，它综合了高级语言和低级语言的特点。  C++ 是由 Bjarne Stroustrup 于 1979 年在新泽西州美利山贝尔实验室开始设计开发的。C++ 进一步扩充和完善了 C 语言，最初命名为带类的C，后来在 1983 年更名为 C++。  C++ 是 C 的一个超集，事实上，任何合法的 C 程序都是合法的 C++ 程序。注意： 使用静态类型的编程语言是在编译时执行类型检查，而不是在运行时执行类型检查。 语言特色： 封装 抽象 继承 多态 目录 "},"src/python/":{"url":"src/python/","title":"Python","keywords":"","body":"Python   Python 是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。  Python 的设计具有很强的可读性，相比其他语言经常使用英文关键字，其他语言的一些标点符号，它具有比其他语言更有特色语法结构。 语言特色： Python 是一种解释型语言： 这意味着开发过程中没有了编译这个环节。类似于PHP和Perl语言。 Python 是交互式语言： 这意味着，您可以在一个 Python 提示符 >>> 后直接执行代码。 Python 是面向对象语言: 这意味着Python支持面向对象的风格或代码封装在对象的编程技术。 Python 是初学者的语言：Python 对初级程序员而言，是一种伟大的语言，它支持广泛的应用程序开发，从简单的文字处理到 WWW 浏览器再到游戏。 目录 "},"src/structure/":{"url":"src/structure/","title":"数据结构","keywords":"","body":"数据结构 "},"src/algorithm/":{"url":"src/algorithm/","title":"常用算法","keywords":"","body":"常用算法 "},"src/algorithm/sort.html":{"url":"src/algorithm/sort.html","title":"排序算法","keywords":"","body":"排序算法 ...未完待续... var gitalk = new Gitalk({ \"clientID\": \"44d7c96f948be236a8c9\", \"clientSecret\": \"fb9fb3178db6640131c4e3eb69f9449e42bba661\", \"repo\": \"blog\", \"owner\": \"Zhang-jie-jun\", \"admin\": [\"Zhang-jie-jun\"], \"id\": location.pathname, \"distractionFreeMode\": false }); gitalk.render(\"gitalk-container\"); "},"src/linux/":{"url":"src/linux/","title":"Linux常用命令","keywords":"","body":"Linux常用命令 "},"src/linux/grep.html":{"url":"src/linux/grep.html","title":"Linux三剑客","keywords":"","body":"Linux三剑客 ...未完待续... var gitalk = new Gitalk({ \"clientID\": \"44d7c96f948be236a8c9\", \"clientSecret\": \"fb9fb3178db6640131c4e3eb69f9449e42bba661\", \"repo\": \"blog\", \"owner\": \"Zhang-jie-jun\", \"admin\": [\"Zhang-jie-jun\"], \"id\": location.pathname, \"distractionFreeMode\": false }); gitalk.render(\"gitalk-container\"); "},"src/mysql/":{"url":"src/mysql/","title":"MySql","keywords":"","body":"MySql "},"src/mysql/install.html":{"url":"src/mysql/install.html","title":"MySql安装与使用","keywords":"","body":"MySql安装与使用 ...未完待续... var gitalk = new Gitalk({ \"clientID\": \"44d7c96f948be236a8c9\", \"clientSecret\": \"fb9fb3178db6640131c4e3eb69f9449e42bba661\", \"repo\": \"blog\", \"owner\": \"Zhang-jie-jun\", \"admin\": [\"Zhang-jie-jun\"], \"id\": location.pathname, \"distractionFreeMode\": false }); gitalk.render(\"gitalk-container\"); "},"src/thrift/":{"url":"src/thrift/","title":"Thrift","keywords":"","body":"Thrift "},"src/thrift/introduction.html":{"url":"src/thrift/introduction.html","title":"Thrift简介","keywords":"","body":"Thrift简介 ...未完待续... var gitalk = new Gitalk({ \"clientID\": \"44d7c96f948be236a8c9\", \"clientSecret\": \"fb9fb3178db6640131c4e3eb69f9449e42bba661\", \"repo\": \"blog\", \"owner\": \"Zhang-jie-jun\", \"admin\": [\"Zhang-jie-jun\"], \"id\": location.pathname, \"distractionFreeMode\": false }); gitalk.render(\"gitalk-container\"); "},"src/framework/":{"url":"src/framework/","title":"微服务架构","keywords":"","body":"微服务架构 "},"src/framework/microservice.html":{"url":"src/framework/microservice.html","title":"什么是微服务","keywords":"","body":"什么是微服务 ...未完待续... var gitalk = new Gitalk({ \"clientID\": \"44d7c96f948be236a8c9\", \"clientSecret\": \"fb9fb3178db6640131c4e3eb69f9449e42bba661\", \"repo\": \"blog\", \"owner\": \"Zhang-jie-jun\", \"admin\": [\"Zhang-jie-jun\"], \"id\": location.pathname, \"distractionFreeMode\": false }); gitalk.render(\"gitalk-container\"); "},"src/vmware/":{"url":"src/vmware/","title":"VMware","keywords":"","body":"VMware "},"src/vmware/transmitmode.html":{"url":"src/vmware/transmitmode.html","title":"VMware备份传输模式","keywords":"","body":"VMware备份传输模式 ...未完待续... var gitalk = new Gitalk({ \"clientID\": \"44d7c96f948be236a8c9\", \"clientSecret\": \"fb9fb3178db6640131c4e3eb69f9449e42bba661\", \"repo\": \"blog\", \"owner\": \"Zhang-jie-jun\", \"admin\": [\"Zhang-jie-jun\"], \"id\": location.pathname, \"distractionFreeMode\": false }); gitalk.render(\"gitalk-container\"); "},"src/github/function.html":{"url":"src/github/function.html","title":"git的使用方法","keywords":"","body":"git使用方法 git是什么？   Git是目前世界上最先进的分布式版本控制系统。 SVN与Git的最主要的区别？   SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了。  Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。 如何操作？ 创建版本库   什么是版本库？版本库又名仓库，英文名repository,你可以简单的理解一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”。 进入用于创建仓库的目录 通过命令 git init 把这个目录变成git可以管理的仓库 把文件添加到版本库中： 在仓库目录下新建文件or目录 使用命令 git add \"文件\" 添加到暂存区里面去 用命令 git commit告诉Git，把文件一次性提交到仓库（分支），参数 -m 用来添加备注信息 通过命令git status来查看是否还有文件未提交 通过命令git diff “文件” 查看文件修改的内容 版本回退 改变HEAD指向 使用命令 git log查看下历史记录 使用git reset --hard HEAD^回到上一个版本 使用git reset --hard HEAD^^ 回到上上个版本 使用git reset --hard HEAD~N回到前N个版本 通过版本号 通过git reflog 命令获取版本号 通过git reset --har “版本号” 命令回退 如何理解工作区与暂存区的区别？   工作区：就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。  版本库(Repository)：工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。我们前面说过使用Git提交文件到版本库有两步： 第一步：是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。 第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。 git撤销修改和删除文件操作 撤销修改： 第一：如果我知道要删掉那些内容的话，直接手动更改去掉那些需要的文件，然后add添加到暂存区，最后commit掉。 第二：我可以按以前的方法直接恢复到上一个版本。使用 git reset --hard HEAD^。 第三：用git checkout -- “文件” 命令丢弃工作区修改。使用git checkout 命令把工作区做的修改全部撤销有两种情况: 文件自动修改后，还没有放到暂存区，使用 撤销修改就回到和版本库一模一样的状态。 另外一种是文件已经放入暂存区，接着又作修改，撤销修改就回到添加暂存区后的状态。注意：命令git checkout -- “文件” 中的 -- 很重要，如果没有 -- 的话，那么命令变成创建分支了。 删除文件：  一般情况下，可以直接在文件目录中把文件删了，或者使用如上rm命令：rm b.txt ，如果我想彻底从版本库中删掉了此文件的话，可以再执行commit命令提交。  如果没有commit之前，想在版本库中恢复此文件可以使用命令 git checkout -- b.txt来恢复。 远程仓库   先注册github账号，由于你的本地Git仓库和github仓库之间的传输是通过SSH加密的，所以需要一点设置： 第一步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果有的话，直接跳过此如下命令，如果没有的话，打开命令行，输入如下命令： ssh-keygen -t rsa –C “youremail@example.com”   注意：id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。 第二步：登录github,打开” settings”中的SSH Keys页面，然后点击“Add SSH Key”,填上任意title，在Key文本框里黏贴id_rsa.pub文件的内容。 如何添加远程库？   现在的情景是：我们已经在本地创建了一个Git仓库后，又想在github创建一个Git仓库，并且希望这两个仓库进行远程同步，这样github的仓库可以作为备份，又可以其他人通过该仓库来协作。  首先，登录github上，然后在右上角找到“create a new repo”创建一个新的仓库。  目前，在GitHub上的这个testgit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。  现在，我们根据GitHub的提示，在本地的testgit仓库下运行命令： git remote add origin https://github.com/tugenhua0707/仓库名   把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程。  从现在起，只要本地作了提交，就可以通过如下命令： git push origin master   把本地master分支的最新修改推送到github上了，现在你就拥有了真正的分布式版本库了。 如何从远程库克隆？   上面我们了解了先有本地库，后有远程库时候，如何关联远程库。  现在我们想，假如远程库有新的内容了，我想克隆到本地来 如何克隆呢？  使用命令git clone [url] 从远程仓库克隆一个本地库。 创建与合并分支   在版本回填退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。  首先，我们来创建dev分支，然后切换到dev分支上。如下操作： git checkout 命令加上 –b参数表示创建并切换，相当于如下2条命令 git branch dev git checkout dev git branch查看分支，会列出所有的分支，当前分支前面会添加一个星号 然后在新建的dev分支上添加文件 最后切回主分支master上 现在我们可以把dev分支上的内容合并到分支master上，在master分支上，使用命令： git merge dev git merge命令用于合并指定分支到当前分支上 总结创建与合并分支命令如下： 查看分支：git branch 创建分支：git branch name 切换分支：git checkout name 创建+切换分支：git checkout –b name 合并某分支到当前分支：git merge name 删除分支：git branch –d name 常见问题 如何解决冲突？   Git用>>>>>>标记出不同分支的内容，其中>>>>fenzhi1 是指fenzhi1上修改的内容。修改代码跟主分支上一样。 分支管理策略   通常合并分支时，git一般使用”Fast forward”模式，在这种模式下，删除分支后，会丢掉分支信息，现在我们来使用带参数 –no-ff来禁用”Fast forward”模式。  首先我们来做demo演示下：    创建一个dev分支。    修改readme.txt内容。    添加到暂存区。    切换回主分支(master)。    合并dev分支，使用命令 git merge –no-ff -m “注释” dev    查看历史记录  分支策略：首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。 bug分支   在开发中，会经常碰到bug问题，那么有了bug就需要修复，在Git中，分支是很强大的，每个bug都可以通过一个临时分支来修复，修复完成后，合并分支，然后将临时的分支删除掉。  比如我在开发中接到一个404 bug时候，我们可以创建一个404分支来修复它，但是，当前的dev分支上的工作还没有提交。并不是我不想提交，而是工作进行到一半时候，我们还无法提交，比如我这个分支bug要2天完成，但是我issue-404 bug需要5个小时内完成。怎么办呢？还好，Git还提供了一个stash功能，可以把当前工作现场 ”隐藏起来”，等以后恢复现场后继续工作。 git stash 《隐藏工作现场》   所以现在我可以通过创建issue-404分支来修复bug了。  首先我们要确定在那个分支上修复bug，比如我现在是在主分支master上来修复的，现在我要在master分支上创建一个临时分支。修复完成后，切换到master分支上，并完成合并，最后删除issue-404分支。  现在，我们回到dev分支上干活了。  隐藏工作现场后，工作区是干净的，那么我们工作现场去哪里呢？我们可以使用命令git stash list来查看下。  工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，可以使用如下2个方法：   1. git stash apply恢复，恢复后，stash内容并不删除，你需要使用命令git stash drop来删除。   2. 另一种方式是使用git stash pop,恢复的同时把stash内容也删除了。 多人协作   当你从远程库克隆时候，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且远程库的默认名称是origin。  要查看远程库的信息 使用 git remote  要查看远程库的详细信息 使用 git remote –v 推送分支   推送分支就是把该分支上所有本地提交到远程库中，推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上： 使用命令：git push origin master   那么一般情况下，那些分支要推送呢？  master分支是主分支，因此要时刻与远程同步。  一些修复bug分支不需要推送到远程去，可以先合并到主分支上，然后把主分支master推送到远程去。 抓取分支   多人协作时，大家都会往master分支上推送各自的修改。  现在我们的同事要在dev分支上做开发，就必须把远程的origin的dev分支到本地来，于是可以使用命令创建本地dev分支： git checkout –b dev origin/dev   现在同事们就可以在dev分支上做开发了，开发完成后把dev分支推送到远程库上。 同事们已经向origin/dev分支上推送了提交，而我在我的目录文件下也对同样的文件同个地方作了修改，也试图推送到远程库时：推送失败。  推送失败是因为我的同事最新提交的和我试图推送的有冲突，解决的办法也很简单，上面已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后在本地合并，解决冲突，再推送。  这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的 解决冲突完全一样。解决后，提交，再push。因此：多人协作工作模式一般是这样的： 首先，可以试图用git push origin branch-name推送自己的修改. 如果推送失败，则因为远程分支比你的本地更新早，需要先用git pull试图合并。 如果合并有冲突，则需要解决冲突，并在本地提交。再用git push origin branch-name推送。 git常用命令 　　mkdir： XX (创建一个空目录 XX指目录名) 　　pwd： 显示当前目录的路径。 　　git init 把当前的目录变成可以管理的git仓库，生成隐藏.git文件。 　　git add XX 把xx文件添加到暂存区去。 　　git commit –m “XX” 提交文件 –m 后面的是注释。 　　git status 查看仓库状态 　　git diff XX 查看XX文件修改了那些内容 　　git log 查看历史记录 　　git reset --hard HEAD^ 或者 git reset --hard HEAD~ 回退到上一个版本 　　(如果想回退到100个版本，使用git reset –hard HEAD~100 ) 　　cat XX 查看XX文件内容 　　git reflog 查看历史记录的版本号id 　　git checkout -- XX 把XX文件在工作区的修改全部撤销。 　　git rm XX 删除XX文件 　　git remote add origin https://github.com/tugenhua0707/testgit 关联一个远程库 　　git push –u(第一次要用-u 以后不需要) origin master 把当前master分支推送到远程库 　　git clone https://github.com/tugenhua0707/testgit 从远程库中克隆 　　git checkout –b dev 创建dev分支 并切换到dev分支上 　　git branch 查看当前所有的分支 　　git checkout master 切换回master分支 　　git merge dev 在当前的分支上合并dev分支 　　git branch –d dev 删除dev分支 　　git branch name 创建分支 　　git stash 把当前的工作隐藏起来 等以后恢复现场后继续工作 　　git stash list 查看所有被隐藏的文件列表 　　git stash apply 恢复被隐藏的文件，但是内容不删除 　　git stash drop 删除文件 　　git stash pop 恢复文件的同时 也删除文件 　　git remote 查看远程库的信息 　　git remote –v 查看远程库的详细信息 　　git push origin master Git会把master分支推送到远程库对应的远程分支上 ...未完待续... var gitalk = new Gitalk({ \"clientID\": \"44d7c96f948be236a8c9\", \"clientSecret\": \"fb9fb3178db6640131c4e3eb69f9449e42bba661\", \"repo\": \"blog\", \"owner\": \"Zhang-jie-jun\", \"admin\": [\"Zhang-jie-jun\"], \"id\": location.pathname, \"distractionFreeMode\": false }); gitalk.render(\"gitalk-container\"); "}}